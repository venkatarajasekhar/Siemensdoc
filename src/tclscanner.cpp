
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
#define yy_create_buffer tclscanYY_create_buffer
#define yy_delete_buffer tclscanYY_delete_buffer
#define yy_flex_debug tclscanYY_flex_debug
#define yy_init_buffer tclscanYY_init_buffer
#define yy_flush_buffer tclscanYY_flush_buffer
#define yy_load_buffer_state tclscanYY_load_buffer_state
#define yy_switch_to_buffer tclscanYY_switch_to_buffer
#define yyin tclscanYYin
#define yyleng tclscanYYleng
#define yylex tclscanYYlex
#define yylineno tclscanYYlineno
#define yyout tclscanYYout
#define yyrestart tclscanYYrestart
#define yytext tclscanYYtext
#define yywrap tclscanYYwrap
#define yyalloc tclscanYYalloc
#define yyrealloc tclscanYYrealloc
#define yyfree tclscanYYfree

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE tclscanYYrestart(tclscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int tclscanYYleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *tclscanYYin, *tclscanYYout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE tclscanYYlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-tclscanYYlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < tclscanYYleng; ++yyl )\
                    if ( tclscanYYtext[yyl] == '\n' )\
                        --tclscanYYlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up tclscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up tclscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via tclscanYYrestart()), so that the user can continue scanning by
	 * just pointing tclscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when tclscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int tclscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow tclscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh tclscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void tclscanYYrestart (FILE *input_file  );
void tclscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE tclscanYY_create_buffer (FILE *file,int size  );
void tclscanYY_delete_buffer (YY_BUFFER_STATE b  );
void tclscanYY_flush_buffer (YY_BUFFER_STATE b  );
void tclscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void tclscanYYpop_buffer_state (void );

static void tclscanYYensure_buffer_stack (void );
static void tclscanYY_load_buffer_state (void );
static void tclscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER tclscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE tclscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE tclscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE tclscanYY_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *tclscanYYalloc (yy_size_t  );
void *tclscanYYrealloc (void *,yy_size_t  );
void tclscanYYfree (void *  );

#define yy_new_buffer tclscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        tclscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            tclscanYY_create_buffer(tclscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        tclscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            tclscanYY_create_buffer(tclscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] tclscanYYtext/tclscanYYin/tclscanYYout/yy_state_type/tclscanYYlineno etc. def's & init go here */
/* Begin user sect3 */

#define tclscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *tclscanYYin = (FILE *) 0, *tclscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int tclscanYYlineno;

int tclscanYYlineno = 1;

extern char *tclscanYYtext;
#define yytext_ptr tclscanYYtext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up tclscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle tclscanYYtext and tclscanYYleng for yymore() goes here \ */\
	tclscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to tclscanYYtext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 32
#define YY_END_OF_BUFFER 33
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[158] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   30,   30,   33,   31,    1,   31,   31,   31,
       31,   31,   14,   15,   31,    7,   31,   31,   19,   31,
       22,   22,   20,   20,   30,   29,   28,   27,   30,   25,
       26,    0,    0,    0,    0,    0,    0,    2,    0,    0,
        0,    0,    0,    0,   19,    0,    0,   18,   23,   21,
       30,   30,    0,   24,    0,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   13,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       16,    0,    0,    0,    0,    0,    0,    0,    0,    5,
        0,    0,   17,    0,    0,    0,    0,    0,    0,    0,
        4,    0,    0,    0,    0,    8,    0,    3,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    9,    0,    0,
        0,    0,   12,   11,    0,   10,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    6,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    7,    1,    1,
        1,    1,    1,    1,    8,    9,   10,   11,   12,   13,
       14,   15,   13,   13,   13,   16,   17,   18,   19,   20,
       13,   21,   22,   23,   24,   13,   13,   13,   25,   13,
        1,   26,    1,    1,    1,    1,   27,   28,   29,   30,

       31,   13,   32,   33,   13,   13,   13,   34,   35,   36,
       37,   38,   13,   39,   40,   41,   42,   13,   13,   13,
       43,   13,   44,    1,   45,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    5,    2
    } ;

static yyconst flex_int16_t yy_base[181] =
    {   0,
        0,   42,  378,  375,    0,  391,    3,    4,    8,    9,
       13,   16,   20,   28,  391,  405,  405,  380,   17,   21,
        3,   18,  405,  405,  377,  405,   86,    5,   23,  369,
      405,  356,  405,  342,    0,  405,  405,  405,   38,  405,
      405,  344,   70,   45,   52,   20,   39,  405,   67,    0,
       87,   73,   83,   60,   86,  290,  289,  405,  405,  405,
        0,  114,  287,  405,  283,  405,  112,  113,  152,  111,
       41,   70,   91,  120,  263,  110,  121,  113,  120,  121,
      157,  166,  169,  240,  122,  129,  233,  405,  134,  144,
      161,  151,  153,  180,  192,  184,  154,  144,  169,  180,

      189,  188,  207,  194,  215,  209,  214,  209,  227,  138,
      405,  110,  224,  221,  215,  232,    0,  214,    0,  405,
      226,  246,  405,  231,  225,  257,   99,  222,  264,   96,
      405,  227,  233,  268,    0,  405,  271,  405,  167,  277,
      241,   98,  278,    0,  280,    0,  281,  405,   87,   64,
      287,    0,  405,  405,   50,  405,  405,  295,  300,  305,
      310,  315,  320,  325,  330,  335,  340,  345,  349,  354,
       23,  359,  364,  369,  373,  378,  383,  388,  393,  398
    } ;

static yyconst flex_int16_t yy_def[181] =
    {   0,
      158,  158,  159,  159,  158,  160,  161,  161,  162,  162,
      163,  163,  164,  164,  157,  157,  157,  165,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  166,  166,  167,
      157,  157,  157,  157,  168,  157,  157,  157,  169,  157,
      157,  170,  171,  157,  157,  157,  157,  157,  157,  172,
      157,  157,  157,  166,  166,  167,  167,  157,  157,  157,
      168,  169,  173,  157,  170,  157,  171,  171,  171,   69,
      157,  157,  157,  157,  172,  157,  157,  157,  157,  157,
       69,   69,   69,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,   69,   69,   69,  174,  175,  157,  157,

      157,  157,  157,  157,   69,   69,   69,  174,  174,  175,
      157,  157,  157,  157,  157,  157,  176,  157,  157,  157,
       69,   69,  157,  157,  157,  157,  176,  157,   69,  157,
      157,  157,  157,  157,  177,  157,  157,  157,  157,  157,
      157,  177,  157,  178,  157,  179,  157,  157,  178,  179,
      157,  180,  157,  157,  180,  157,    0,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157
    } ;

static yyconst flex_int16_t yy_nxt[451] =
    {   0,
      157,  119,  120,   17,   18,   29,   29,   55,   19,   20,
       16,   16,   32,   32,   46,   16,   21,   34,   16,   22,
       34,   36,   37,   38,   39,   55,   68,   19,   20,   36,
       37,   38,   39,   46,   21,   44,   45,   22,   47,   63,
       64,   63,   73,   23,   24,   17,   18,   30,   30,   56,
       19,   20,  156,   44,   45,   71,   47,   74,   21,   72,
       73,   22,   55,   40,   41,   84,  154,   56,   49,   19,
       20,   40,   41,   50,   71,   74,   21,   67,   72,   22,
       79,   63,   63,   84,   69,   23,   24,   49,   55,  153,
       70,   85,   50,   51,   80,   76,   67,  130,  131,   79,

      148,  136,   69,   52,   56,   86,   53,   77,   70,   85,
       78,   97,   51,   80,   76,   63,   64,   63,   83,   67,
       67,   52,   68,   86,   53,   77,   69,   69,   78,   87,
       56,   89,   81,   70,   90,   91,   92,   83,   67,   67,
      111,   68,   93,   98,   69,   69,  111,   99,   87,   89,
       81,   70,   90,   91,   92,  109,  100,   63,   63,   67,
       93,   98,  103,   82,   83,   99,   69,  101,   68,  138,
       94,  139,   70,   95,  100,  102,  104,   68,   67,  112,
       68,  103,   82,   83,   69,  101,   96,   68,   94,   81,
       70,   68,   95,  102,  104,   68,   68,  107,  112,   68,

      113,  105,  106,   68,   96,  114,  115,   81,  116,  118,
       68,  123,   81,  117,   68,  107,  119,  120,  113,  105,
      121,  106,   68,  114,  115,  122,   68,  118,  109,  123,
       81,  124,  125,  116,   97,  126,  128,   68,  117,  121,
      132,   97,  133,  137,  122,   68,  129,  130,  131,  140,
      124,  125,  123,  126,  128,  141,   68,   68,  134,  132,
      133,  137,  147,  135,  129,   88,  138,  140,  139,  134,
      123,   83,  143,  141,  135,   68,   68,  144,  145,  143,
      147,  145,  151,  146,  144,   66,  146,  152,  151,   64,
       83,   58,   58,  152,   68,   16,   16,   16,   16,   16,

       25,   25,   25,   25,   25,   26,   26,   26,   26,   26,
       28,   28,   28,   28,   28,   31,   31,   31,   31,   31,
       33,   33,   33,   33,   33,   35,   35,   35,   35,   35,
       42,   42,   42,   42,   42,   54,   54,   54,   54,   54,
       57,   57,   57,   57,   57,   61,   66,   60,   61,   62,
       62,   62,   62,   62,   65,   65,   65,   65,   65,   75,
       75,   59,   75,   75,   63,   63,   63,   63,   63,  108,
      108,   58,  108,  110,  110,  110,  110,  110,  127,  127,
       48,  127,  127,  142,  142,   43,  142,  142,  149,  149,
      157,  149,  149,  150,  150,   27,  150,  150,  155,  155,

       16,  155,  155,   16,   15,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157
    } ;

static yyconst flex_int16_t yy_chk[451] =
    {   0,
        0,  119,  119,    1,    1,    7,    8,   28,    1,    1,
        9,   10,    9,   10,   21,   11,    1,   11,   12,    1,
       12,   13,   13,   13,   13,   29,  171,    1,    1,   14,
       14,   14,   14,   21,    1,   19,   20,    1,   22,   39,
       39,   39,   46,    1,    1,    2,    2,    7,    8,   28,
        2,    2,  155,   19,   20,   44,   22,   47,    2,   45,
       46,    2,   54,   13,   13,   71,  150,   29,   49,    2,
        2,   14,   14,   49,   44,   47,    2,   43,   45,    2,
       52,   39,   39,   71,   43,    2,    2,   27,   55,  149,
       43,   72,   27,   27,   53,   51,   43,  130,  130,   52,

      142,  127,   43,   27,   54,   73,   27,   51,   43,   72,
       51,  112,   27,   53,   51,   62,   62,   62,   70,   67,
       68,   27,   70,   73,   27,   51,   67,   68,   51,   74,
       55,   76,   67,   68,   77,   78,   79,   70,   67,   68,
      110,   70,   80,   85,   67,   68,   98,   86,   74,   76,
       67,   68,   77,   78,   79,   97,   89,   62,   62,   69,
       80,   85,   92,   69,   81,   86,   69,   90,   81,  139,
       81,  139,   69,   82,   89,   91,   93,   82,   69,   99,
       83,   92,   69,   81,   69,   90,   83,   81,   81,   83,
       69,   94,   82,   91,   93,   96,   82,   96,   99,   83,

      100,   94,   95,   95,   83,  101,  102,   83,  103,  104,
       94,  108,   95,  103,   96,   96,  105,  105,  100,   94,
      106,   95,   95,  101,  102,  107,  105,  104,  109,  109,
       95,  113,  114,  116,   87,  115,  118,  121,  116,  106,
      124,   84,  125,  128,  107,  105,  121,  122,  122,  132,
      113,  114,  108,  115,  118,  133,  121,  122,  126,  124,
      125,  128,  141,  126,  121,   75,  129,  132,  129,  134,
      109,  129,  137,  133,  134,  129,  122,  137,  140,  143,
      141,  145,  147,  140,  143,   65,  145,  147,  151,   63,
      129,   57,   56,  151,  129,  158,  158,  158,  158,  158,

      159,  159,  159,  159,  159,  160,  160,  160,  160,  160,
      161,  161,  161,  161,  161,  162,  162,  162,  162,  162,
      163,  163,  163,  163,  163,  164,  164,  164,  164,  164,
      165,  165,  165,  165,  165,  166,  166,  166,  166,  166,
      167,  167,  167,  167,  167,  168,   42,   34,  168,  169,
      169,  169,  169,  169,  170,  170,  170,  170,  170,  172,
      172,   32,  172,  172,  173,  173,  173,  173,  173,  174,
      174,   30,  174,  175,  175,  175,  175,  175,  176,  176,
       25,  176,  176,  177,  177,   18,  177,  177,  178,  178,
       15,  178,  178,  179,  179,    6,  179,  179,  180,  180,

        4,  180,  180,    3,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[33] =
    {   0,
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 
    0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int tclscanYY_flex_debug;
int tclscanYY_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[32] =
    {   0,
      142,  143,  145,  146,  147,  148,  150,  151,  152,  154,
      155,  157,  159,  162,  168,  170,  173,  176,  178,  180,
      181,  183,  184,  186,  187,  188,  189,  190,  191,  192,
      195
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *tclscanYYtext;
#line 1 "tclscanner.l"
/*****************************************************************************
 * Parser for Tcl subset
 *
 * Modifed by Benedikt Schraik, 2011
 * Copyright (C) 2010      by Rene Zaumseil
 * based on the work of Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "tclscanner.l"
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>
#include <stdint.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
    //#include <qlist.h>
#include <unistd.h>
#include <qfile.h>
#include <qdict.h>

#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "pre.h"
#include "tclscanner.h"
#include "outputlist.h"
#include "membername.h"
#include "searchindex.h"
#include "commentcnv.h"
#include "bufstr.h"
#include "portable.h"

#include <stdarg.h>
#include <qstring.h>
#include <qstringlist.h>
#include <qlist.h>

#define YY_NEVER_INTERACTIVE 1

#define MAX_INCLUDE_DEPTH 10


//! Structure containing the current scan context
typedef struct {
    int type;
    int line0; //start of segment
    int line1; //end of segment
    Entry *e_current;
    Entry *e_class;
    Entry *e_function;
    Entry *e_namespace;
    Protection prot;
} tcl_context;

//! Structure containing all internal global variables.
 static struct {
     CodeOutputInterface * code; // if set then we are codifying the file
     int code_line; // current line of code
     int code_linenumbers; // if true create line numbers in code

     bool config_autobrief; // value of configuration option
     const char* input_string; // file contents
     int input_position; // position in file
     QCString file_name; // name of used file
     ParserInterface *this_parser; // myself

     //used by Helper Functions
     int quote;
     QCString func_args_temp;
     int func_brace;
     QCString func_body_temp;

     Entry* e_main; // top level entry
     Entry* e_file; // entry of current file
     Entry* e_current; // currently used entry
     Entry* e_inside; // contain entry of current scan context

     QStack<tcl_context> stack; // stack of scan contexts
     QDict<Entry*> ns; // all read namespace entries
     QDict<Entry*> cl; // all read class entries
     QDict<Entry*> fn; // all read function entries
     QList<Entry*> entry; // list of all created entries
     Protection protection; // current protections state
 } tcl;
//------------------------------------------------------------
// Global Vars
// used by scanner
 enum CMTTYP { NAME, AUTHOR, BRIEF, ARGS, RETURN } ctyp;

//------------------------------------------------------------
// Prototypes
 static int yyread(char *buf, int max_size);
 void tcl_cmt_store(QCString txt);
 void tcl_func_name(QCString txt);
 void tcl_func_args(QCString txt, int line, bool end = TRUE);
 void tcl_func_body(QCString txt);
 void tcl_block_end(tcl_context* context, int line);
 void tcl_class_init(QCString txt, int line);

//-----------------------------------------------------------------------
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);
//-----------------------------------------------------------------------
/* Start Conditions */






#line 869 "<stdout>"

#define INITIAL 0
#define QUOTE 1
#define CMTHEAD 2
#define FUNCARGS 3
#define CMTARGS 4
#define CMTRANGE 5
#define FUNCBODY 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int tclscanYYlex_destroy (void );

int tclscanYYget_debug (void );

void tclscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE tclscanYYget_extra (void );

void tclscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *tclscanYYget_in (void );

void tclscanYYset_in  (FILE * in_str  );

FILE *tclscanYYget_out (void );

void tclscanYYset_out  (FILE * out_str  );

int tclscanYYget_leng (void );

char *tclscanYYget_text (void );

int tclscanYYget_lineno (void );

void tclscanYYset_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int tclscanYYwrap (void );
#else
extern int tclscanYYwrap (void );
#endif
#endif

/* %not-for-header */

    static void yyunput (int c,char *buf_ptr  );
    
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( tclscanYYtext, tclscanYYleng, 1, tclscanYYout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( tclscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( tclscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, tclscanYYin))==0 && ferror(tclscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(tclscanYYin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int tclscanYYlex (void);

#define YY_DECL int tclscanYYlex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after tclscanYYtext and tclscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( tclscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(tclscanYYtext[tclscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 141 "tclscanner.l"

#line 1137 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! tclscanYYin )
/* %if-c-only */
			tclscanYYin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! tclscanYYout )
/* %if-c-only */
			tclscanYYout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			tclscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				tclscanYY_create_buffer(tclscanYYin,YY_BUF_SIZE );
		}

		tclscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of tclscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 158 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 405 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for tclscanYYlineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < tclscanYYleng; ++yyl )
				if ( tclscanYYtext[yyl] == '\n' )
					   
    tclscanYYlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( tclscanYY_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 32 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], tclscanYYtext );
			else if ( yy_act == 32 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         tclscanYYtext );
			else if ( yy_act == 33 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 142 "tclscanner.l"
yy_push_state(QUOTE);
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 143 "tclscanner.l"
yy_pop_state();
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 145 "tclscanner.l"
yy_push_state(CMTHEAD);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 146 "tclscanner.l"
yy_push_state(CMTRANGE);
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 147 "tclscanner.l"
yy_push_state(CMTARGS);
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 148 "tclscanner.l"

	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 150 "tclscanner.l"
{ yy_pop_state(); yyless(0); }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 151 "tclscanner.l"
{ ctyp = NAME; tcl_cmt_store(tclscanYYtext); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 152 "tclscanner.l"
{ ctyp = AUTHOR;
						tcl_cmt_store(tclscanYYtext); }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 154 "tclscanner.l"
{ ctyp = ARGS; tcl_cmt_store(tclscanYYtext); }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 155 "tclscanner.l"
{ ctyp = BRIEF;
						tcl_cmt_store(tclscanYYtext); }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 157 "tclscanner.l"
{ ctyp = RETURN;
						tcl_cmt_store(tclscanYYtext); }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 159 "tclscanner.l"
tcl_cmt_store(tclscanYYtext);
	YY_BREAK
/* Start new Tcl Block */
case 14:
YY_RULE_SETUP
#line 162 "tclscanner.l"
{ tcl_context next; next.line0 = tclscanYYlineno;
	next.e_current = tcl.e_current;
	tcl.e_current = NULL;
	tcl.stack.push(&next);
	printf("Klammer auf, %d\n",tclscanYYlineno); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 168 "tclscanner.l"
{ tcl_block_end(tcl.stack.pop(), tclscanYYlineno); }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 170 "tclscanner.l"
tcl_class_init(tclscanYYtext, tclscanYYlineno);
	YY_BREAK
/* TODO method has to be processed seperate */
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 173 "tclscanner.l"
{ tcl_func_name(tclscanYYtext);
	yy_push_state(FUNCARGS); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 176 "tclscanner.l"
{ tcl_func_args(tclscanYYtext, tclscanYYlineno);
				yy_pop_state(); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 178 "tclscanner.l"
{ tcl_func_args(tclscanYYtext, tclscanYYlineno, FALSE); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 180 "tclscanner.l"
/* store */
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 181 "tclscanner.l"
{ yy_pop_state(); yyless(0); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 183 "tclscanner.l"
/* store */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 184 "tclscanner.l"
{ yy_pop_state(); yyless(0); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 186 "tclscanner.l"
{ tcl_func_body(tclscanYYtext); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 187 "tclscanner.l"
{ tcl_func_body(tclscanYYtext); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 188 "tclscanner.l"
{ tcl_func_body(tclscanYYtext); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 189 "tclscanner.l"
{ tcl_func_body(tclscanYYtext); }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 190 "tclscanner.l"
{ tcl_func_body(tclscanYYtext); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 191 "tclscanner.l"
{ tcl_func_body(tclscanYYtext); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 192 "tclscanner.l"
{ tcl_func_body(tclscanYYtext); }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 195 "tclscanner.l"
/* discard */;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 197 "tclscanner.l"
ECHO;
	YY_BREAK
#line 1452 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(CMTHEAD):
case YY_STATE_EOF(FUNCARGS):
case YY_STATE_EOF(CMTARGS):
case YY_STATE_EOF(CMTRANGE):
case YY_STATE_EOF(FUNCBODY):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed tclscanYYin at a new source and called
			 * tclscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = tclscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( tclscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * tclscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of tclscanYYlex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					tclscanYYrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			tclscanYYrestart(tclscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) tclscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 158 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 158 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 157);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

    static void yyunput (int c, register char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up tclscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update tclscanYYlineno here */

    if ( c == '\n' ){
        --tclscanYYlineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					tclscanYYrestart(tclscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( tclscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve tclscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and tclscanYYlineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    tclscanYYlineno++;
;

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void tclscanYYrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        tclscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            tclscanYY_create_buffer(tclscanYYin,YY_BUF_SIZE );
	}

	tclscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	tclscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void tclscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		tclscanYYpop_buffer_state();
	 *		tclscanYYpush_buffer_state(new_buffer);
     */
	tclscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	tclscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (tclscanYYwrap()) processing, but the only time this flag
	 * is looked at is after tclscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void tclscanYY_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	tclscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE tclscanYY_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) tclscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in tclscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) tclscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in tclscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	tclscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with tclscanYY_create_buffer()
 * 
 */
/* %if-c-only */
    void tclscanYY_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		tclscanYYfree((void *) b->yy_ch_buf  );

	tclscanYYfree((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a tclscanYYrestart() or at EOF.
 */
/* %if-c-only */
    static void tclscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	tclscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then tclscanYY_init_buffer was _probably_
     * called from tclscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void tclscanYY_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		tclscanYY_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void tclscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	tclscanYYensure_buffer_stack();

	/* This block is copied from tclscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from tclscanYY_switch_to_buffer. */
	tclscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void tclscanYYpop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	tclscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		tclscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void tclscanYYensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)tclscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in tclscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)tclscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in tclscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE tclscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) tclscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in tclscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	tclscanYY_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to tclscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       tclscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE tclscanYY_scan_string (yyconst char * yystr )
{
    
	return tclscanYY_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to tclscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE tclscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) tclscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in tclscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = tclscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in tclscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

/* %if-c-only */
    static void yy_push_state (int  new_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) tclscanYYalloc(new_size  );

		else
			(yy_start_stack) = (int *) tclscanYYrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
    static void yy_pop_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
    static int yy_top_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up tclscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		tclscanYYtext[tclscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = tclscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		tclscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int tclscanYYget_lineno  (void)
{
        
    return tclscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *tclscanYYget_in  (void)
{
        return tclscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *tclscanYYget_out  (void)
{
        return tclscanYYout;
}

/** Get the length of the current token.
 * 
 */
int tclscanYYget_leng  (void)
{
        return tclscanYYleng;
}

/** Get the current token.
 * 
 */

char *tclscanYYget_text  (void)
{
        return tclscanYYtext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void tclscanYYset_lineno (int  line_number )
{
    
    tclscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see tclscanYY_switch_to_buffer
 */
void tclscanYYset_in (FILE *  in_str )
{
        tclscanYYin = in_str ;
}

void tclscanYYset_out (FILE *  out_str )
{
        tclscanYYout = out_str ;
}

int tclscanYYget_debug  (void)
{
        return tclscanYY_flex_debug;
}

void tclscanYYset_debug (int  bdebug )
{
        tclscanYY_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from tclscanYYlex_destroy(), so don't allocate here.
     */

    /* We do not touch tclscanYYlineno unless the option is enabled. */
    tclscanYYlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    tclscanYYin = stdin;
    tclscanYYout = stdout;
#else
    tclscanYYin = (FILE *) 0;
    tclscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * tclscanYYlex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* tclscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int tclscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		tclscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		tclscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	tclscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        tclscanYYfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * tclscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *tclscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *tclscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void tclscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see tclscanYYrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 197 "tclscanner.l"


//------------------------------------------------------------
// Functions
void tcl_error(QCString func, int line, QCString msg)
{	//todo implement for error handling
	printf("ERROR in %s at line %d: %s\n",(const char*)func,
	       line,(const char*)msg);
	exit(EXIT_FAILURE);
}

//! creates new Entry object without any data
Entry* tcl_entry_new()
{
	Entry *newEntry = new Entry;
	newEntry->section = Entry::EMPTY_SEC;
	newEntry->name = "";
	newEntry->fileName = tcl.file_name;
	return newEntry;
}

//! stores the header to the current Entry Object
void tcl_cmt_store(QCString txt)
{
//	QCString txt = str;
//	Entry e_tmp = tcl_entry_new();
	txt.remove(0,txt.find(':'));	//remove type qualifier
	txt = txt.stripWhiteSpace();	//remove whitepsaces at begin + end

	switch(ctyp) {	//Todo: Implement storing of comment
	default: printf("Ctyp: %d Text: %s\n",ctyp,(const char *)txt); break;
	}
}

//! finishes an entry after the end of the block
void tcl_block_end(tcl_context* context, int line)
{
    printf("Klammer zu, %d\n",line);
}

//! inits new class entry
void tcl_class_init(QCString txt, int line)
{
	QCString name;
	QRegExp white("[ \\t]");
	QRegExp nonwhite("[^ \\t\{]");
	int index;

	printf("Text: |%s|\n", (const char*)txt);

	index = txt.find('{');
	if(index == -1)
		tcl_error(__FUNCTION__,__LINE__,
			  "couldn't find an opening brace!");

	yyless(index);	//put everything inluding opening brace back to scanner

	index = txt.find(white);	//find end of "class"
	if(index == -1)		//error
		tcl_error(__FUNCTION__,__LINE__,"couldn't find whitespace");
	txt.remove(0,index);

	index = txt.find(nonwhite);
	if(index == -1)
		tcl_error(__FUNCTION__,__LINE__,"couldn't find a class name");
	txt.remove(0,index);

	index = txt.find(white);
	if(index == -1) {
		index = txt.find('{');
		if(index == -1)
			tcl_error(__FUNCTION__,__LINE__,
				  "should not be reached, { was already found");
	}

	name = txt.left(index);

	printf("Klasse: |%s|\n",(const char*)name);
}

//! handles function analysing
void tcl_func_name(QCString txt)
{
	QCString typ, name;
	QRegExp white("[ \\t]");
	QRegExp letter("[^ \\t]");
	int index;

	index = txt.find(white);	//find first part of command
	if(index == -1)		//error
		tcl_error(__FUNCTION__,__LINE__,"couldn't find whitespace");
	typ = txt.left(index);	//copy body/proc/method
	txt.remove(0,index);	//remove copied string
	index = txt.find(letter);
	if(index == -1)		//error no name
		tcl_error(__FUNCTION__,__LINE__,"couldn't find name");
	txt.remove(0,index);	//remove whitespaces

	index = txt.find(white);	//find end of name
	if(index == -1)
		tcl_error(__FUNCTION__,__LINE__,"couldn't find end of name");
	name = txt.left(index);

	//processing of name
	if(typ == "body") {
		printf("Body Function |%s|\n",(const char*)name);
	} else if(typ == "method") {
		//TODO
	} else if(typ == "proc") {
		//TODO
	} else {
		tcl_error(__FUNCTION__,__LINE__,"unrecongnised function typ");
	}
}

//! stores Argument string, if end is false, arg string has more lines
void tcl_func_args(QCString txt, int line, bool end)
{
	if(end) {
		QRegExp cbrace("\\}");
		QRegExp obrace("\\{");
		int index;

		index = txt.find(cbrace);
		if(index == -1)
			tcl_error(__FUNCTION__,__LINE__,
					  "should contain a brace");

		if(!tcl.func_args_temp.isEmpty())	//insert space
			tcl.func_args_temp += " ";
		tcl.func_args_temp += txt.left(index);

		// TODO Process ARGS
		printf("%s: %s | %d\n",__FUNCTION__,
		       (const char*)tcl.func_args_temp, line);

		index = txt.find(obrace);
		if(index == -1) {
			//no new block -> function is over after the line
			//-> do not insert Entry to current Entry
		} else {
			//TODO copy entry correct
			tcl_context next;
			next.line0 = tclscanYYlineno;
			next.e_current = tcl.e_current;
			tcl.e_current = NULL;
			tcl.stack.push(&next);
			printf("Klammer auf, %d\n",tclscanYYlineno);
		}

		tcl.func_args_temp = "";  //clear storage string

	} else {
		txt.stripWhiteSpace(); //remove whitespace at beginning and end
		if(!tcl.func_args_temp.isEmpty())
			tcl.func_args_temp += " ";
		tcl.func_args_temp += txt;
	}
}

//! handles the function body, including Procedure Range and Procedure Args
void tcl_func_body(QCString txt)
{
	if(tcl.quote) {
		if(txt == "\"")
			tcl.quote = 0;
	} else {
		if(txt == "\"") {
			tcl.quote = 1;
		} else if(txt == "{") {
			tcl.func_brace++;
		} else if(txt == "}") {
			tcl.func_brace--;
			if(tcl.func_brace == 0) { //function is over
				yy_pop_state();
				printf("Function over\n");
			}
		} else if(txt == "\"") {

		} else if(txt == "#%ProcedureRange") {
			/* TODO Processing */
		} else if(txt == "#%ProcedureArgs") {
			/* TODO Processing */
		} else if(txt == "#%EndArgs") {
			/* TODO Processing */
		}
	}
}



//! inits for tcl scanner
void tcl_init(void)
{
    tcl.quote = 0;
    tcl.func_brace = 0;
}

//! Parse text file and build up entry tree.
void TclLanguageScanner::parseInput(const char *fileName,
				    const char *input,
				    Entry *root) {
	QFile myFile;

	myFile.setName(fileName);
	if (!myFile.open(IO_ReadOnly)) return;

	printf("Parsing '%s'...\n",fileName);

	printf("Debug: %s\n", input);
	tclscanYYlineno = 0;

	groupEnterFile(fileName,tclscanYYlineno);

	tcl.input_string = NULL;
	tcl.input_position = 0;
	tclscanYYrestart(tclscanYYin);
/*****************************************
  tcl_init();
  tcl.code = NULL;
  tcl.input_string = input;
  tcl.file_name = fileName;
  tcl.this_parser = this;
  tcl.entry_main          = root; // toplevel entry
  tcl_parse();
*****************************************/
	tcl.input_string = input;

	Entry *e1 = new Entry;
	e1->section = Entry::FUNCTION_SEC;
	e1->startLine = 1;
	e1->type = "int";
	e1->name = "k1";
	e1->args = "(int a, int b)";
	e1->lang = SrcLangExt_Tcl;
	e1->brief = "Kurze Doku Nr.1";
	e1->fileName = fileName;

	Entry *e2 = new Entry;
	e2->section = Entry::GROUPDOC_SEC;
	e2->groupDocType = Entry::GROUPDOC_ADD;
	e2->name = "mem1";
	e2->fileName = fileName;

	Entry *ef = new Entry;
	ef->name = fileName;
	ef->section = Entry::SOURCE_SEC;

	root->addSubEntry(ef);

	if(strcmp(fileName,"/home/ben/Projects/doctool/tcl_examples/component.tcl") == 0) {
	    ef->addSubEntry(e1);
	} else {
	    ef->addSubEntry(e2);
	}
	//	initGroupInfo(e1);

	tclscanYYlineno = 1;
	tclscanYYlex();
	groupLeaveFile(tcl.file_name,tclscanYYlineno);
	root->program.resize(0);
	myFile.close();



}

//! Parse file and codify.
void TclLanguageScanner::parseCode(CodeOutputInterface & codeOutIntf,
				   const char * scopeName,
				   const QCString & input,
				   bool isExampleBlock,
				   const char * exampleName,
				   FileDef * fileDef,
				   int startLine,
				   int endLine,
				   bool inlineFragment,
				   MemberDef *memberDef,
				   bool showLineNumbers
				   ) {
	return;
}

bool TclLanguageScanner::needsPreprocessing(const QCString &extension) {
  (void)extension;
  return FALSE;
}

void TclLanguageScanner::resetCodeParserState() {
}

void TclLanguageScanner::parsePrototype(const char *text) {
  (void)text;
}

static int yyread(char *buf,int max_size)
{
  int c=0;

  *buf = '\0';
  while ( c < max_size && tcl.input_string[tcl.input_position] )
  {
    *buf = tcl.input_string[tcl.input_position++] ;
    c++; buf++;
  }
  //printf("Read from=%d size=%d max=%d c=%d\n",tcl.input_position,strlen(&tcl.input_string[tcl.input_position]),max_size,c);
  return c;
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION)
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void fscannerYYdummy() { yy_flex_realloc(0,0); }
}
#endif


